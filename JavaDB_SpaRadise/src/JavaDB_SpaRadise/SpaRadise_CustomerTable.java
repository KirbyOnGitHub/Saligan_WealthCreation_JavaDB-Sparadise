/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package JavaDB_SpaRadise;

/**
 *
 * @author ASUS
 */


import java.awt.BorderLayout;
import java.sql.Statement;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

public class SpaRadise_CustomerTable extends javax.swing.JFrame {

    /**
     * Creates new form SpaRadise_CustomerTable
     */
    public SpaRadise_CustomerTable() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerTable = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        insertButton = new javax.swing.JButton();
        firstName_Label = new javax.swing.JLabel();
        middleName_Label = new javax.swing.JLabel();
        firstName_txtFld = new javax.swing.JTextField();
        middleName_txtFld = new javax.swing.JTextField();
        lastName_txtFld = new javax.swing.JTextField();
        fillButton = new javax.swing.JButton();
        id_Label = new javax.swing.JLabel();
        sex_txtFld = new javax.swing.JTextField();
        id_txtFld = new javax.swing.JTextField();
        ID_FindBttn = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        lastName_Label = new javax.swing.JLabel();
        sex_Label = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        SpaRadise_Database_Label = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        selectableAttributes_ForSorting_ComboBox = new javax.swing.JComboBox<>();
        ascendingDescending_ComboBox = new javax.swing.JComboBox<>();
        sortButton = new javax.swing.JButton();
        reloadButton = new javax.swing.JButton();
        CustomerTable_Label = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        age_Label = new javax.swing.JLabel();
        age_txtFld = new javax.swing.JTextField();
        addressLine_Label = new javax.swing.JLabel();
        addressLine_txtFld = new javax.swing.JTextField();
        barangay_txtFld = new javax.swing.JTextField();
        city_txtFld = new javax.swing.JTextField();
        barangay_Label = new javax.swing.JLabel();
        city_Label = new javax.swing.JLabel();
        province_txtFld = new javax.swing.JTextField();
        country_txtFld = new javax.swing.JTextField();
        zipcode_txtFld = new javax.swing.JTextField();
        phoneNum_txtFld = new javax.swing.JTextField();
        emailAddress_txtFld = new javax.swing.JTextField();
        province_Label = new javax.swing.JLabel();
        country_Label = new javax.swing.JLabel();
        zipcode_Label = new javax.swing.JLabel();
        phoneNum_Label = new javax.swing.JLabel();
        emailAddress_Label = new javax.swing.JLabel();
        clearAllButton = new javax.swing.JButton();
        findAttribute_Button = new javax.swing.JButton();
        selectableAttributes_ForFinding_ComboBox = new javax.swing.JComboBox<>();
        selectedAttribute_AllData_ComboBox = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jSeparator5 = new javax.swing.JSeparator();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Customer ID", "First Name", "Middle Name", "Last name", "Sex", "Age", "Address Line", "Barangay", "City", "Province", "Country", "Zipcode", "Phone Number", "Email Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(customerTable);

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        insertButton.setText("Insert");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        firstName_Label.setText("First Name:");

        middleName_Label.setText("Middle Name:");

        firstName_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstName_txtFldActionPerformed(evt);
            }
        });

        middleName_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                middleName_txtFldActionPerformed(evt);
            }
        });

        lastName_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastName_txtFldActionPerformed(evt);
            }
        });

        fillButton.setText("Fill");
        fillButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillButtonActionPerformed(evt);
            }
        });

        id_Label.setText("Customer ID:");

        sex_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sex_txtFldActionPerformed(evt);
            }
        });

        id_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                id_txtFldActionPerformed(evt);
            }
        });

        ID_FindBttn.setText("Find");
        ID_FindBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ID_FindBttnActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        lastName_Label.setText("Last Name:");
        lastName_Label.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lastName_LabelFocusGained(evt);
            }
        });

        sex_Label.setText("Sex:");
        sex_Label.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sex_LabelFocusGained(evt);
            }
        });

        SpaRadise_Database_Label.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        SpaRadise_Database_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SpaRadise_Database_Label.setText("SpaRadise Database:");

        selectableAttributes_ForSorting_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select an Attribute" }));
        selectableAttributes_ForSorting_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectableAttributes_ForSorting_ComboBoxActionPerformed(evt);
            }
        });

        ascendingDescending_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ASCENDING", "DESCENDING" }));

        sortButton.setText("Sort");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        reloadButton.setText("Reload");
        reloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadButtonActionPerformed(evt);
            }
        });

        CustomerTable_Label.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        CustomerTable_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CustomerTable_Label.setText("'Customer' Table");

        age_Label.setText("Age:");

        age_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                age_txtFldActionPerformed(evt);
            }
        });

        addressLine_Label.setText("Address Line:");

        addressLine_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressLine_txtFldActionPerformed(evt);
            }
        });

        barangay_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barangay_txtFldActionPerformed(evt);
            }
        });

        city_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                city_txtFldActionPerformed(evt);
            }
        });

        barangay_Label.setText("Barangay:");

        city_Label.setText("City:");

        province_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                province_txtFldActionPerformed(evt);
            }
        });

        country_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                country_txtFldActionPerformed(evt);
            }
        });

        zipcode_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zipcode_txtFldActionPerformed(evt);
            }
        });

        phoneNum_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneNum_txtFldActionPerformed(evt);
            }
        });

        emailAddress_txtFld.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        emailAddress_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailAddress_txtFldActionPerformed(evt);
            }
        });

        province_Label.setText("Province:");

        country_Label.setText("Country:");

        zipcode_Label.setText("Zipcode:");

        phoneNum_Label.setText("Phone Num:");

        emailAddress_Label.setText("Email Addr:");

        clearAllButton.setText("Clear All");
        clearAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllButtonActionPerformed(evt);
            }
        });

        findAttribute_Button.setText("Find");
        findAttribute_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findAttribute_ButtonActionPerformed(evt);
            }
        });

        selectableAttributes_ForFinding_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectableAttributes_ForFinding_ComboBoxActionPerformed(evt);
            }
        });

        selectedAttribute_AllData_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedAttribute_AllData_ComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 227, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(CustomerTable_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(SpaRadise_Database_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(555, 555, 555)
                .addComponent(jSeparator3)
                .addGap(556, 556, 556))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(295, 295, 295)
                .addComponent(clearAllButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectableAttributes_ForFinding_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedAttribute_AllData_ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(insertButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(sex_Label)
                                            .addComponent(age_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(city_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(addressLine_Label)
                                            .addComponent(barangay_Label)
                                            .addComponent(province_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(country_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(zipcode_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(phoneNum_Label)
                                            .addComponent(emailAddress_Label)
                                            .addComponent(lastName_Label)
                                            .addComponent(firstName_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addComponent(middleName_Label))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(middleName_txtFld)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fillButton, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))
                            .addComponent(barangay_txtFld)
                            .addComponent(addressLine_txtFld)
                            .addComponent(age_txtFld)
                            .addComponent(sex_txtFld)
                            .addComponent(lastName_txtFld)
                            .addComponent(city_txtFld)
                            .addComponent(province_txtFld)
                            .addComponent(country_txtFld)
                            .addComponent(zipcode_txtFld)
                            .addComponent(phoneNum_txtFld)
                            .addComponent(emailAddress_txtFld)
                            .addComponent(firstName_txtFld))))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(276, 276, 276))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(findAttribute_Button)
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(id_Label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(id_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ID_FindBttn))
                            .addComponent(jSeparator5)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(reloadButton)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(selectableAttributes_ForSorting_ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ascendingDescending_ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sortButton)))
                        .addGap(311, 311, 311))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(SpaRadise_Database_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CustomerTable_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(id_Label)
                    .addComponent(id_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ID_FindBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectableAttributes_ForFinding_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectedAttribute_AllData_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findAttribute_Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstName_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstName_Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(middleName_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(middleName_Label)
                    .addComponent(sortButton)
                    .addComponent(selectableAttributes_ForSorting_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastName_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastName_Label)
                    .addComponent(ascendingDescending_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sex_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sex_Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(age_Label)
                            .addComponent(age_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addressLine_Label)
                            .addComponent(addressLine_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reloadButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(barangay_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(barangay_Label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(city_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(city_Label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(province_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(province_Label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(country_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(country_Label))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(zipcode_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(zipcode_Label))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(phoneNum_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(phoneNum_Label))
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(emailAddress_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(emailAddress_Label))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(insertButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fillButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(clearAllButton))
                                .addGap(31, 31, 31))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        // TODO add your handling code here:

        try (Connection connection = establishConnection()) {
            
            // Get data from text fields
            String firstName = firstName_txtFld.getText().trim();
            String middleName = middleName_txtFld.getText().trim();
            String lastName = lastName_txtFld.getText().trim();
            String sex = sex_txtFld.getText().trim();
            String age = age_txtFld.getText().trim();
            String addressLine = addressLine_txtFld.getText().trim();
            String barangay = barangay_txtFld.getText().trim();
            String city = city_txtFld.getText().trim();
            String province = province_txtFld.getText().trim();
            String country = country_txtFld.getText().trim();
            String zipcode = zipcode_txtFld.getText().trim();
            String phoneNum = phoneNum_txtFld.getText().trim();
            String emailAddress = emailAddress_txtFld.getText().trim();

            // Check if any of the required fields is empty
            if (firstName.isEmpty() || middleName.isEmpty() || lastName.isEmpty() || sex.isEmpty() || age.isEmpty() || addressLine.isEmpty() || barangay.isEmpty() || city.isEmpty() || province.isEmpty() || country.isEmpty() || zipcode.isEmpty() || phoneNum.isEmpty() || emailAddress.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all text fields.");
                return;  // Stop further processing if fields are empty
            }
            
            // Check for duplicate entry
            if (isDuplicateEntry(firstName, lastName, emailAddress)) {
                return;
            }

            String insertQuery = "INSERT INTO customer (firstname, middlename, lastname, sex, age, addressline, barangay, city, province, country, zipcode, phonenumber, emailaddress) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            try (PreparedStatement preparedStatement = connection.prepareStatement(insertQuery)) {
                // Set parameters in the prepared statement
                preparedStatement.setString(1, firstName);
                preparedStatement.setString(2, middleName);
                preparedStatement.setString(3, lastName);
                preparedStatement.setString(4, sex);
                preparedStatement.setString(5,age);
                preparedStatement.setString(6,addressLine);
                preparedStatement.setString(7,barangay);
                preparedStatement.setString(8,city);
                preparedStatement.setString(9,province);
                preparedStatement.setString(10,country);
                preparedStatement.setString(11,zipcode);
                preparedStatement.setString(12,phoneNum);
                preparedStatement.setString(13,emailAddress);

                // Execute the insert statement
                preparedStatement.executeUpdate();

                resetTextFields();
                reloadTable();
            }
        } catch (SQLException ex) {
            Logger.getLogger(SpaRadise_CustomerTable.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SpaRadise_CustomerTable.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_insertButtonActionPerformed

    private void firstName_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstName_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstName_txtFldActionPerformed

    private void middleName_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_middleName_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_middleName_txtFldActionPerformed

    private void lastName_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastName_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastName_txtFldActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = customerTable.getSelectedRow();

        if (selectedRow != -1) { // Check if a row is selected
            
            // Get data from the selected row
            String customer_id = customerTable.getValueAt(selectedRow, 0).toString();
            String firstName = customerTable.getValueAt(selectedRow, 1).toString();
            String middleName = customerTable.getValueAt(selectedRow, 2).toString();
            String lastName = customerTable.getValueAt(selectedRow, 3).toString();
            String sex = customerTable.getValueAt(selectedRow, 4).toString();
            String age = customerTable.getValueAt(selectedRow, 5).toString();
            String addressLine = customerTable.getValueAt(selectedRow, 6).toString();
            String barangay = customerTable.getValueAt(selectedRow, 7).toString();
            String city = customerTable.getValueAt(selectedRow, 8).toString();
            String province = customerTable.getValueAt(selectedRow, 9).toString();
            String country = customerTable.getValueAt(selectedRow, 10).toString();
            String zipcode = customerTable.getValueAt(selectedRow, 11).toString();
            String phoneNum = customerTable.getValueAt(selectedRow, 12).toString();
            String emailAddress = customerTable.getValueAt(selectedRow, 13).toString();

            int option = JOptionPane.showConfirmDialog(this, "Do you want to delete the selected data?\n\n"
                    + "First Name: " + firstName + "\nMiddle Name: " + middleName + "\nLast Name: " + lastName + "\nCity: " + city,
                    "Confirm Deletion", JOptionPane.YES_NO_OPTION);

            if (option == JOptionPane.YES_OPTION) {
                // Perform the delete operation
            try (Connection connection = establishConnection()) {
                    
                    String deleteQuery = "DELETE FROM customer WHERE customer_id = ? AND firstname = ? AND middlename = ? AND lastname = ? AND sex = ? AND age = ? AND addressLine = ? AND barangay = ? AND city = ? AND province = ? AND country = ? AND zipcode = ? AND phonenumber = ? AND emailAddress = ?";
                    try (PreparedStatement preparedStatement = connection.prepareStatement(deleteQuery)) {
                        preparedStatement.setString(1, customer_id);
                        preparedStatement.setString(2, firstName);
                        preparedStatement.setString(3, middleName);
                        preparedStatement.setString(4, lastName);
                        preparedStatement.setString(5, sex);
                        preparedStatement.setString(6,age);
                        preparedStatement.setString(7,addressLine);
                        preparedStatement.setString(8,barangay);
                        preparedStatement.setString(9,city);
                        preparedStatement.setString(10,province);
                        preparedStatement.setString(11,country);
                        preparedStatement.setString(12,zipcode);
                        preparedStatement.setString(13,phoneNum);
                        preparedStatement.setString(14,emailAddress);
                        
                        // Execute the delete statement
                        preparedStatement.executeUpdate();
                    }

                    resetTextFields();
                    reloadTable();
                    
                } catch (SQLException e) {
                    e.printStackTrace();
                    // Handle the exception appropriately (show a message to the user, log it, etc.)
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(SpaRadise_CustomerTable.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void fillButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillButtonActionPerformed
        // TODO add your handling code here:
        try {
            // Get the selected row index
            int selectedRow = customerTable.getSelectedRow();

            // Ensure a row is selected
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a row to fill the text fields with.");
                return;
            }
            
            // Get data from the selected row
            String customer_id = customerTable.getValueAt(selectedRow, 0).toString();
            String firstName = customerTable.getValueAt(selectedRow, 1).toString();
            String middleName = customerTable.getValueAt(selectedRow, 2).toString();
            String lastName = customerTable.getValueAt(selectedRow, 3).toString();
            String sex = customerTable.getValueAt(selectedRow, 4).toString();
            String age = customerTable.getValueAt(selectedRow, 5).toString();
            String addressLine = customerTable.getValueAt(selectedRow, 6).toString();
            String barangay = customerTable.getValueAt(selectedRow, 7).toString();
            String city = customerTable.getValueAt(selectedRow, 8).toString();
            String province = customerTable.getValueAt(selectedRow, 9).toString();
            String country = customerTable.getValueAt(selectedRow, 10).toString();
            String zipcode = customerTable.getValueAt(selectedRow, 11).toString();
            String phoneNum = customerTable.getValueAt(selectedRow, 12).toString();
            String emailAddress = customerTable.getValueAt(selectedRow, 13).toString();
            
            id_txtFld.setText(customer_id);
            firstName_txtFld.setText(firstName);
            middleName_txtFld.setText(middleName);
            lastName_txtFld.setText(lastName);
            sex_txtFld.setText(sex);
            age_txtFld.setText(age);
            addressLine_txtFld.setText(addressLine);
            barangay_txtFld.setText(barangay);
            city_txtFld.setText(city);
            province_txtFld.setText(province);
            country_txtFld.setText(country);
            zipcode_txtFld.setText(zipcode);
            phoneNum_txtFld.setText(phoneNum);
            emailAddress_txtFld.setText(emailAddress);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage());
        }
    }//GEN-LAST:event_fillButtonActionPerformed

    private void sex_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sex_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sex_txtFldActionPerformed

    private void id_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_id_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_id_txtFldActionPerformed

    private void ID_FindBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ID_FindBttnActionPerformed
        // TODO add your handling code here:
                                                 
        try (Connection connection = establishConnection()) {

            // Ensure id_txtFld is not empty before proceeding
            String customer_id = id_txtFld.getText().trim();
            if (customer_id.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter an ID to find.");
                return;
            }

            String findQuery = "SELECT * FROM customer WHERE customer_id = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(findQuery)) {
                preparedStatement.setString(1, customer_id);

                // Use executeQuery to retrieve the result set
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        
                        // Found a matching record, update the text fields
                        String firstName = resultSet.getString("firstname");
                        String middleName = resultSet.getString("middlename");
                        String lastName = resultSet.getString("lastname");
                        String sex = resultSet.getString("sex");
                        String age = resultSet.getString("age");
                        String addressLine = resultSet.getString("addressline");
                        String barangay = resultSet.getString("barangay");
                        String city = resultSet.getString("city");
                        String province = resultSet.getString("province");
                        String country = resultSet.getString("country");
                        String zipcode = resultSet.getString("zipcode");
                        String phoneNum = resultSet.getString("phonenumber");
                        String emailAddress = resultSet.getString("emailAddress");

                        // Assuming these are JTextFields, update them accordingly
                        firstName_txtFld.setText(firstName);
                        middleName_txtFld.setText(middleName);
                        lastName_txtFld.setText(lastName);
                        sex_txtFld.setText(sex);
                        age_txtFld.setText(age);
                        addressLine_txtFld.setText(addressLine);
                        barangay_txtFld.setText(barangay);
                        city_txtFld.setText(city);
                        province_txtFld.setText(province);
                        country_txtFld.setText(country);
                        zipcode_txtFld.setText(zipcode);
                        phoneNum_txtFld.setText(phoneNum);
                        emailAddress_txtFld.setText(emailAddress);
                        
                        // Get the table model
                        DefaultTableModel tableModel = (DefaultTableModel) customerTable.getModel();
                        
                        // Setting to Selection Mode
                        customerTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        // Find and selecting the row index based on the customer_id of the looked data
                        for (int i = 0; i < tableModel.getRowCount(); i++) {
                            if (tableModel.getValueAt(i, 0).equals(customer_id)) {
                                // Select the row in the JTable
                                customerTable.setRowSelectionInterval(i, i);
                                // Scroll to the selected row
                                customerTable.scrollRectToVisible(customerTable.getCellRect(i, 0, true));
                                break;
                            }
                        }
                        
                    } else {
                        // No matching record found
                        JOptionPane.showMessageDialog(this, "No record found with ID: " + customer_id);
                    }
                }
            }

            reloadTable();

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception appropriately (show a message to the user, log it, etc.)
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SpaRadise_CustomerTable.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage());
        }
    }//GEN-LAST:event_ID_FindBttnActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:

        try (Connection connection = establishConnection()) {
            // Ensure id_txtFld is not empty before proceeding
            String customer_id = id_txtFld.getText().trim();
            if (customer_id.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter an ID to update.");
                return;
            }

            // Get the new data from text fields
            String newfirstName = firstName_txtFld.getText().trim();
            String newmiddleName = middleName_txtFld.getText().trim();
            String newlastName = lastName_txtFld.getText().trim();
            String newsex = sex_txtFld.getText().trim();
            String newage = age_txtFld.getText().trim();
            String newaddressLine = addressLine_txtFld.getText().trim();
            String newbarangay = barangay_txtFld.getText().trim();
            String newcity = city_txtFld.getText().trim();
            String newprovince = province_txtFld.getText().trim();
            String newcountry = country_txtFld.getText().trim();
            String newzipcode = zipcode_txtFld.getText().trim();
            String newphoneNum = phoneNum_txtFld.getText().trim();
            String newemailAddress = emailAddress_txtFld.getText().trim();

            // Execute a SELECT query to fetch the current data
            String selectQuery = "SELECT firstname, middlename, lastname, sex, age, addressline, barangay, city, province, country, zipcode, phonenumber, emailaddress FROM customer WHERE customer_id = ?";
            try (PreparedStatement selectStatement = connection.prepareStatement(selectQuery)) {
                selectStatement.setString(1, customer_id);

                try (ResultSet resultSet = selectStatement.executeQuery()) {
                    // Check if there's a result
                    if (resultSet.next()) {

                        // Get the current data from the result set
                        String currentfirstName = resultSet.getString("firstname");
                        String currentmiddleName = resultSet.getString("middlename");
                        String currentlastName = resultSet.getString("lastname");
                        String currentsex = resultSet.getString("sex");
                        String currentage = resultSet.getString("age");
                        String currentaddressLine = resultSet.getString("addressline");
                        String currentbarangay = resultSet.getString("barangay");
                        String currentcity = resultSet.getString("city");
                        String currentprovince = resultSet.getString("province");
                        String currentcountry = resultSet.getString("country");
                        String currentzipcode = resultSet.getString("zipcode");
                        String currentphoneNum = resultSet.getString("phonenumber");
                        String currentemailAddress = resultSet.getString("emailAddress");

                        // Create a list for current data and new data
                        ArrayList<String> ListOf_CurrentData = new ArrayList<>(Arrays.asList(
                            currentfirstName, currentmiddleName, currentlastName,
                            currentsex, currentage, currentaddressLine, currentbarangay,
                            currentcity, currentprovince, currentcountry, currentzipcode,
                            currentphoneNum, currentemailAddress
                        ));

                        ArrayList<String> ListOf_NewData = new ArrayList<>(Arrays.asList(
                                newfirstName, newmiddleName, newlastName,
                                newsex, newage, newaddressLine, newbarangay,
                                newcity, newprovince, newcountry, newzipcode,
                                newphoneNum, newemailAddress
                        ));

                        // Create a preview message
                        StringBuilder previewMessage = new StringBuilder("Data to be updated:\n" + 
                                                                        "\n" + 
                                                                        "ID: " + customer_id + "\n" );

                        for (int i = 0; i < ListOf_CurrentData.size(); i++) {
                            if (!ListOf_CurrentData.get(i).equals(ListOf_NewData.get(i))) {
                                previewMessage.append("   > ")
                                        .append(selectableAttributes_ForFinding_ComboBox.getItemAt(i + 2))
                                        .append(": ")
                                        .append(" '")
                                        .append(ListOf_CurrentData.get(i))
                                        .append("' --> '")
                                        .append(ListOf_NewData.get(i))
                                        .append("'\n");
                            }
                        }

                        // Show confirmation dialog with preview
                        int option = JOptionPane.showConfirmDialog(this, previewMessage.toString(), "Confirm Update", JOptionPane.YES_NO_OPTION);
                        if (option == JOptionPane.YES_OPTION) {
                            // User clicked Yes, proceed with the update

                            // Update query
                            String updateQuery = "UPDATE customer SET firstname = ?, middlename = ?, lastname = ?, sex = ?, age = ?, addressline = ?, barangay = ?, city = ?, province = ?, country = ?, zipcode = ?, phonenumber = ?, emailaddress = ? WHERE customer_id = ?";
                            try (PreparedStatement updateStatement = connection.prepareStatement(updateQuery)) {
                                updateStatement.setString(1, newfirstName);
                                updateStatement.setString(2, newmiddleName);
                                updateStatement.setString(3, newlastName);
                                updateStatement.setString(4, newsex);
                                updateStatement.setString(5, newage);
                                updateStatement.setString(6, newaddressLine);
                                updateStatement.setString(7, newbarangay);
                                updateStatement.setString(8, newcity);
                                updateStatement.setString(9, newprovince);
                                updateStatement.setString(10, newcountry);
                                updateStatement.setString(11, newzipcode);
                                updateStatement.setString(12, newphoneNum);
                                updateStatement.setString(13, newemailAddress);
                                updateStatement.setString(14, customer_id);

                                int rowsUpdated = updateStatement.executeUpdate();

                                if (rowsUpdated > 0) {
                                    JOptionPane.showMessageDialog(this, "Data updated successfully.");
                                } else {
                                    JOptionPane.showMessageDialog(this, "No record found with ID: " + customer_id);
                                }
                            }

                            resetTextFields();
                            reloadTable();
                            
                        } else {
                            // User clicked No, do nothing or provide feedback
                            JOptionPane.showMessageDialog(this, "Update cancelled.");
                        }
                    } else {
                        // No result found for the given customer_id
                        JOptionPane.showMessageDialog(this, "No record found with ID: " + customer_id);
                    }
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception appropriately (show a message to the user, log it, etc.)
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SpaRadise_CustomerTable.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage());
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void lastName_LabelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lastName_LabelFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_lastName_LabelFocusGained

    private void sex_LabelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sex_LabelFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_sex_LabelFocusGained

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        // TODO add your handling code here:

        try (Connection connection = establishConnection()) {
            // Get selected attribute and order
            String selectedAttribute = String.valueOf(selectableAttributes_ForSorting_ComboBox.getSelectedItem());
            String selectedOrder = String.valueOf(ascendingDescending_ComboBox.getSelectedItem());

            // Check if an attribute is selected for sorting
            if (selectedAttribute.isEmpty() || selectedAttribute.equalsIgnoreCase("Select an Attribute")) {
                JOptionPane.showMessageDialog(this, "Please select an attribute to sort by.");
                return;  // Stop further processing if no attribute is selected
            }

            // Convert user-friendly order to SQL order
            String orderByClause = "";
            if (selectedOrder.equalsIgnoreCase("ASCENDING")) {
                orderByClause = selectedAttribute + " ASC";
            } else if (selectedOrder.equalsIgnoreCase("DESCENDING")) {
                orderByClause = selectedAttribute + " DESC";
            }
        

            // Query to select all records from the customer table with sorting
            String selectQuery = "SELECT * FROM customer ORDER BY " + orderByClause;

            try (PreparedStatement preparedStatement = connection.prepareStatement(selectQuery)) {
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    // Assuming you have a method to update the table model with the new data
                    updateTableModel(resultSet);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(SpaRadise_CustomerTable.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SpaRadise_CustomerTable.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_sortButtonActionPerformed

    private void reloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadButtonActionPerformed
        // TODO add your handling code here:
        try {
            resetTextFields();
            reloadTable();
            selectableAttributes_ForFinding_ComboBox.setSelectedIndex(0);
            selectedAttribute_AllData_ComboBox.removeAllItems();
            selectableAttributes_ForSorting_ComboBox.setSelectedIndex(0);
            ascendingDescending_ComboBox.setSelectedIndex(0);
            JOptionPane.showMessageDialog(this,"'Customer' Table has been successfully reloaded." );
        } catch (SQLException ex) {
            Logger.getLogger(SpaRadise_CustomerTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_reloadButtonActionPerformed

    private void selectableAttributes_ForSorting_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectableAttributes_ForSorting_ComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectableAttributes_ForSorting_ComboBoxActionPerformed

    private void age_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_age_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_age_txtFldActionPerformed

    private void addressLine_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressLine_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressLine_txtFldActionPerformed

    private void barangay_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barangay_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_barangay_txtFldActionPerformed

    private void city_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_city_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_city_txtFldActionPerformed

    private void province_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_province_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_province_txtFldActionPerformed

    private void country_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_country_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_country_txtFldActionPerformed

    private void zipcode_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zipcode_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_zipcode_txtFldActionPerformed

    private void phoneNum_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneNum_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneNum_txtFldActionPerformed

    private void emailAddress_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailAddress_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailAddress_txtFldActionPerformed

    private void clearAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllButtonActionPerformed
        // TODO add your handling code here:
        resetTextFields();
    }//GEN-LAST:event_clearAllButtonActionPerformed

    private void findAttribute_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findAttribute_ButtonActionPerformed
        try (Connection connection = establishConnection()) {

            // Ensure id_txtFld is not empty before proceeding
            String selectedAttribute = String.valueOf(selectableAttributes_ForFinding_ComboBox.getSelectedItem());
            String selectedData = String.valueOf(selectedAttribute_AllData_ComboBox.getSelectedItem());
            
            if (selectedAttribute.isEmpty() || selectedAttribute.equalsIgnoreCase("Select an Attribute")) {
                JOptionPane.showMessageDialog(this, "Please select an attribute to find.");
                return;
            } else if (selectedData.isEmpty() || selectedData.equalsIgnoreCase("") || selectedData.equalsIgnoreCase("Select a Data")) {
                JOptionPane.showMessageDialog(this, "Please select a data to find under the selected attribute.");
                return;
            }

            String findQuery = "SELECT * FROM customer WHERE " + selectedAttribute + " = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(findQuery)) {
                preparedStatement.setString(1,selectedData);

                // Use executeQuery to retrieve the result set
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    ArrayList<String> matchingRecords = new ArrayList<>();

                    String customer_id = "", firstName = "", middleName = "", lastName = "", sex = "", age = "", addressLine = "", barangay = "", city = "", province = "", country = "", zipcode = "", phoneNum = "", emailAddress = "";

                    while (resultSet.next()) {
                        // Found a matching record, update the text fields
                        customer_id = resultSet.getString("customer_id");
                        firstName = resultSet.getString("firstname");
                        middleName = resultSet.getString("middlename");
                        lastName = resultSet.getString("lastname");
                        sex = resultSet.getString("sex");
                        age = resultSet.getString("age");
                        addressLine = resultSet.getString("addressline");
                        barangay = resultSet.getString("barangay");
                        city = resultSet.getString("city");
                        province = resultSet.getString("province");
                        country = resultSet.getString("country");
                        zipcode = resultSet.getString("zipcode");
                        phoneNum = resultSet.getString("phonenumber");
                        emailAddress = resultSet.getString("emailAddress");

                        // Append the information to the list
                        matchingRecords.add("ID: " + customer_id + "\n" +
                            "   > First Name: " + firstName + "\n" +
                            "   > Middle Name: " + middleName + "\n" +
                            "   > Last Name: " + lastName + "\n" +
                            "   > Sex: " + sex + "\n" +
                            "   > Age: " + age + "\n" +
                            "   > Address Line: " + addressLine + "\n" +
                            "   > Barangay: " + barangay + "\n" +
                            "   > City: " + city + "\n" +
                            "   > Province: " + province + "\n" +
                            "   > Country: " + country + "\n" +
                            "   > Zipcode: " + zipcode + "\n" +
                            "   > Phone Number: " + phoneNum + "\n" +
                            "   > Email Address: " + emailAddress + "\n");
                    }

                    if (matchingRecords.size() == 1) {
                        // Only one matching record found, fill the text fields

                        // Assuming these are JTextFields, update them accordingly
                        id_txtFld.setText(customer_id);
                        firstName_txtFld.setText(firstName);
                        middleName_txtFld.setText(middleName);
                        lastName_txtFld.setText(lastName);
                        sex_txtFld.setText(sex);
                        age_txtFld.setText(age);
                        addressLine_txtFld.setText(addressLine);
                        barangay_txtFld.setText(barangay);
                        city_txtFld.setText(city);
                        province_txtFld.setText(province);
                        country_txtFld.setText(country);
                        zipcode_txtFld.setText(zipcode);
                        phoneNum_txtFld.setText(phoneNum);
                        emailAddress_txtFld.setText(emailAddress);
                        
                        // Get the table model
                        DefaultTableModel tableModel = (DefaultTableModel) customerTable.getModel();
                        
                        // Setting to Selection Mode
                        customerTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        // Finding and selecting the row index based on customer_id of the looked data
                        for (int i = 0; i < tableModel.getRowCount(); i++) {
                            if (tableModel.getValueAt(i, 0).toString().equals(customer_id)) { 
                                // Select the row in the JTable
                                customerTable.setRowSelectionInterval(i, i);
                                // Scroll to the selected row
                                customerTable.scrollRectToVisible(customerTable.getCellRect(i, 0, true));
                                break;
                            }
                        }

                    } else if (!matchingRecords.isEmpty()) {
                        // Multiple records found, show a message with the information

                        // Create a JTextArea to display the information
                        JTextArea textArea = new JTextArea();
                        textArea.setEditable(false);
                        textArea.setLineWrap(true);
                        textArea.setWrapStyleWord(true);

                        // Create a list of records
                        ArrayList<String> recordsList = new ArrayList<>(matchingRecords);

                        // Create a navigation index array
                        final int[] currentIndex = {0};

                        // Update the text area with the first record
                        textArea.setText(recordsList.get(currentIndex[0]));

                        // Create navigation buttons
                        JButton backButton = new JButton("Back");
                        JButton nextButton = new JButton("Next");

                        // Add action listeners to the buttons
                        backButton.addActionListener(e -> {
                            if (currentIndex[0] > 0) {
                                currentIndex[0]--;
                                textArea.setText(recordsList.get(currentIndex[0]));
                            }
                        });

                        nextButton.addActionListener(e -> {
                            if (currentIndex[0] < recordsList.size() - 1) {
                                currentIndex[0]++;
                                textArea.setText(recordsList.get(currentIndex[0]));
                            }
                        });

                        // Create a JPanel for buttons
                        JPanel buttonPanel = new JPanel();
                        buttonPanel.add(backButton);
                        buttonPanel.add(nextButton);

                        // Create a JScrollPane to make the text area scrollable
                        JScrollPane scrollPane = new JScrollPane(textArea);

                        // Create a JDialog to display the information
                        JDialog dialog = new JDialog(this, "Multiple Records Found", true);
                        dialog.setLayout(new BorderLayout());
                        dialog.add(scrollPane, BorderLayout.CENTER);
                        dialog.add(buttonPanel, BorderLayout.SOUTH);
                        dialog.setSize(400, 400);
                        dialog.setLocationRelativeTo(this);
                        dialog.setVisible(true);

                        resetTextFields();
                    } else {
                        // No matching record found
                        JOptionPane.showMessageDialog(this, "No record/s found with the " + selectedAttribute + ": " + selectedData);
                        resetTextFields();
                    }
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception appropriately (show a message to the user, log it, etc.)
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SpaRadise_CustomerTable.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage());
        }
    }//GEN-LAST:event_findAttribute_ButtonActionPerformed

    private void selectableAttributes_ForFinding_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectableAttributes_ForFinding_ComboBoxActionPerformed
        try (Connection connection = establishConnection()) {
        // Your database logic here
        
        Statement statement;
        statement = connection.createStatement();

        // Get the selected attribute from selectableAttributes_ComboBox
        String selectedAttribute = String.valueOf(selectableAttributes_ForFinding_ComboBox.getSelectedItem());
        
        // Capturing the Error at the startup and resetting the selectedAttribute_AllData_ComboBox when selecting back to 'Select an Attribute'
        if(selectedAttribute.equalsIgnoreCase("Select an Attribute")) {
            selectedAttribute_AllData_ComboBox.removeAllItems();
            return;
        }
        
        String gettingAllData_Query = "SELECT " + selectedAttribute + " FROM customer";
        try (PreparedStatement preparedStatement = connection.prepareStatement(gettingAllData_Query)) {
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
        
                // Reseting the selectedData_AllData_ComboBox
                selectedAttribute_AllData_ComboBox.removeAllItems();
                selectedAttribute_AllData_ComboBox.addItem("Select a Data");
                
                while (resultSet.next()) {
                    String capturedData = resultSet.getString(1);
                    selectedAttribute_AllData_ComboBox.addItem(capturedData);
                }
            }
        }
        
        } catch (SQLException ex) {
            Logger.getLogger(SpaRadise_CustomerTable.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SpaRadise_CustomerTable.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_selectableAttributes_ForFinding_ComboBoxActionPerformed

    private void selectedAttribute_AllData_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedAttribute_AllData_ComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectedAttribute_AllData_ComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws SQLException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SpaRadise_CustomerTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SpaRadise_CustomerTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SpaRadise_CustomerTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpaRadise_CustomerTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SpaRadise_CustomerTable().setVisible(true);
                try {
                    reloadTable();
                    ComboBoxes_addAttributeNames();
                } catch (SQLException ex) {
                    Logger.getLogger(SpaRadise_CustomerTable.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    private static Connection establishConnection() throws SQLException, ClassNotFoundException {
        Class.forName("com.mysql.cj.jdbc.Driver");
        String user = "root";
        String pwd = "root";
        return DriverManager.getConnection("jdbc:mysql://localhost:3306/sparadise", user, pwd);
    }
    
    public static void reloadTable() throws SQLException {
        DefaultTableModel model = (DefaultTableModel) customerTable.getModel();
        model.setRowCount(0);
        
        selectableAttributes_ForSorting_ComboBox.setSelectedIndex(0);
        ascendingDescending_ComboBox.setSelectedIndex(0);
        
        try (Connection connection = establishConnection()) {
            
            Statement statement;
            statement = connection.createStatement();

            // Execute the SQL statements
            String setCounterQuery = "SET @counter = 0";
            String updateQuery = "UPDATE customer SET customer_id = @counter := @counter + 1";

            // Execute the SET statement
            statement.executeUpdate(setCounterQuery);

            // Execute the UPDATE statement
            int rowsUpdated = statement.executeUpdate(updateQuery);
            
            ResultSet resultSet;
            resultSet = statement.executeQuery("SELECT * FROM customer");
            
            while(resultSet.next()) {
                int customer_id = resultSet.getInt(1);
                String firstName = resultSet.getString(2);
                String middleName = resultSet.getString(3);
                String lastName = resultSet.getString(4);
                String sex = resultSet.getString(5);
                String age = resultSet.getString(6);
                String addressLine = resultSet.getString(7);
                String barangay = resultSet.getString(8);
                String city = resultSet.getString(9);
                String province = resultSet.getString(10);
                String country = resultSet.getString(11);
                String zipcode = resultSet.getString(12);
                String phoneNum = resultSet.getString(13);
                String emailAddress = resultSet.getString(14);
                model.addRow(new Object[] {customer_id, firstName, middleName, lastName, sex, age, addressLine, barangay, city, province, country, zipcode, phoneNum, emailAddress});
            }
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SpaRadise_CustomerTable.class.getName()).log(Level.SEVERE, null, ex);
        } 
                
    }
    
    public static void updateTableModel(ResultSet resultSet) throws SQLException {
        DefaultTableModel model = (DefaultTableModel) customerTable.getModel();
        model.setRowCount(0);

        while (resultSet.next()) {
            int customer_id = resultSet.getInt(1);
            String firstName = resultSet.getString(2);
            String middleName = resultSet.getString(3);
            String lastName = resultSet.getString(4);
            String sex = resultSet.getString(5);
            String age = resultSet.getString(6);
            String addressLine = resultSet.getString(7);
            String barangay = resultSet.getString(8);
            String city = resultSet.getString(9);
            String province = resultSet.getString(10);
            String country = resultSet.getString(11);
            String zipcode = resultSet.getString(12);
            String phoneNum = resultSet.getString(13);
            String emailAddress = resultSet.getString(14);
            model.addRow(new Object[] {customer_id, firstName, middleName, lastName, sex, age, addressLine, barangay, city, province, country, zipcode, phoneNum, emailAddress});
        }
    }
    
    private boolean isDuplicateEntry(String firstName, String lastName, String emailAddress) {
        try (Connection connection = establishConnection()) {
            String query = "SELECT * FROM customer WHERE firstname = ? AND lastname = ? AND emailaddress = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, firstName);
                preparedStatement.setString(2, lastName);
                preparedStatement.setString(3, emailAddress);

                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        // If a record is found, display existing data and return true
                        displayExistingRecordData(resultSet);
                        return true;
                    }
                }
            }
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();  // Handle the exception appropriately (log it, show a message, etc.)
        }
        return false;
    }
    
    private void displayExistingRecordData(ResultSet resultSet) throws SQLException {
        // Display existing record data in a formatted message
        StringBuilder message = new StringBuilder("Duplicate Entry Found!\n" + 
                                                    "Attributes Checked: First Name, Last Name, Email Address\n\n");
        
        message.append("Existing Record Data:\n");
        message.append("   > ID: ").append(resultSet.getString("customer_id")).append("\n");
        message.append("   > First Name: ").append(resultSet.getString("firstname")).append("\n");
        message.append("   > Last Name: ").append(resultSet.getString("lastname")).append("\n");
        message.append("   > Sex: ").append(resultSet.getString("sex")).append("\n");
        message.append("   > Age: ").append(resultSet.getString("age")).append("\n");
        message.append("   > Address Line: ").append(resultSet.getString("addressline")).append("\n");
        message.append("   > Barangay: ").append(resultSet.getString("barangay")).append("\n");
        message.append("   > City: ").append(resultSet.getString("city")).append("\n");
        message.append("   > Province: ").append(resultSet.getString("province")).append("\n");
        message.append("   > Country: ").append(resultSet.getString("country")).append("\n");
        message.append("   > Zipcode: ").append(resultSet.getString("zipcode")).append("\n");
        message.append("   > Phone Number: ").append(resultSet.getString("phonenumber")).append("\n");
        message.append("   > Email Address: ").append(resultSet.getString("emailaddress")).append("\n");

        JOptionPane.showMessageDialog(this, message.toString());
    }
    
    public static void ComboBoxes_addAttributeNames() throws SQLException {
        try (Connection connection = establishConnection()) {
        // Your database logic here
        
        Statement statement;
        statement = connection.createStatement();
        
        ResultSet resultSet;
        resultSet = statement.executeQuery("DESC customer");
        
        selectableAttributes_ForFinding_ComboBox.removeAllItems();
        selectableAttributes_ForFinding_ComboBox.addItem("Select an Attribute");
        
        selectableAttributes_ForSorting_ComboBox.removeAllItems();
        selectableAttributes_ForSorting_ComboBox.addItem("Select an Attribute");
        
        while(resultSet.next()) {
            String attributeName = resultSet.getString(1).toUpperCase();
            selectableAttributes_ForFinding_ComboBox.addItem(attributeName);
            selectableAttributes_ForSorting_ComboBox.addItem(attributeName);
        }
        
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
            // Handle the exception appropriately (show a message to the user, log it, etc.)
        }
    }
    
    public static void resetTextFields() {
        id_txtFld.setText("");
        firstName_txtFld.setText("");
        middleName_txtFld.setText("");
        lastName_txtFld.setText("");
        sex_txtFld.setText("");
        age_txtFld.setText("");
        addressLine_txtFld.setText("");
        barangay_txtFld.setText("");
        city_txtFld.setText("");
        province_txtFld.setText("");
        country_txtFld.setText("");
        zipcode_txtFld.setText("");
        phoneNum_txtFld.setText("");
        emailAddress_txtFld.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CustomerTable_Label;
    private javax.swing.JButton ID_FindBttn;
    private javax.swing.JLabel SpaRadise_Database_Label;
    private javax.swing.JLabel addressLine_Label;
    private static javax.swing.JTextField addressLine_txtFld;
    private javax.swing.JLabel age_Label;
    private static javax.swing.JTextField age_txtFld;
    private static javax.swing.JComboBox<String> ascendingDescending_ComboBox;
    private javax.swing.JLabel barangay_Label;
    private static javax.swing.JTextField barangay_txtFld;
    private javax.swing.JLabel city_Label;
    private static javax.swing.JTextField city_txtFld;
    private javax.swing.JButton clearAllButton;
    private javax.swing.JLabel country_Label;
    private static javax.swing.JTextField country_txtFld;
    private static javax.swing.JTable customerTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel emailAddress_Label;
    private static javax.swing.JTextField emailAddress_txtFld;
    private javax.swing.JButton fillButton;
    private javax.swing.JButton findAttribute_Button;
    private javax.swing.JLabel firstName_Label;
    private static javax.swing.JTextField firstName_txtFld;
    private javax.swing.JLabel id_Label;
    private static javax.swing.JTextField id_txtFld;
    private javax.swing.JButton insertButton;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JLabel lastName_Label;
    private static javax.swing.JTextField lastName_txtFld;
    private javax.swing.JLabel middleName_Label;
    private static javax.swing.JTextField middleName_txtFld;
    private javax.swing.JLabel phoneNum_Label;
    private static javax.swing.JTextField phoneNum_txtFld;
    private javax.swing.JLabel province_Label;
    private static javax.swing.JTextField province_txtFld;
    private javax.swing.JButton reloadButton;
    private static javax.swing.JComboBox<String> selectableAttributes_ForFinding_ComboBox;
    private static javax.swing.JComboBox<String> selectableAttributes_ForSorting_ComboBox;
    private static javax.swing.JComboBox<String> selectedAttribute_AllData_ComboBox;
    private javax.swing.JLabel sex_Label;
    private static javax.swing.JTextField sex_txtFld;
    private javax.swing.JButton sortButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JLabel zipcode_Label;
    private static javax.swing.JTextField zipcode_txtFld;
    // End of variables declaration//GEN-END:variables
}
